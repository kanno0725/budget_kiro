// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]
  budgets      Budget[]
  groupMembers GroupMember[]
  paidExpenses SharedExpense[] @relation("Payer")
  settlements  Settlement[]
  groupBalances GroupBalance[] @relation("UserBalance")

  @@map("users")
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Decimal
  category    String
  description String?
  date        DateTime
  type        TransactionType
  userId      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Budget {
  id       String  @id @default(cuid())
  category String
  amount   Decimal
  month    Int
  year     Int
  userId   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, month, year])
  @@map("budgets")
}

model Group {
  id          String   @id @default(cuid())
  name        String
  inviteCode  String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members        GroupMember[]
  sharedExpenses SharedExpense[]
  groupBalances  GroupBalance[] @relation("GroupBalance")

  @@map("groups")
}

model GroupMember {
  id      String    @id @default(cuid())
  userId  String
  groupId String
  role    GroupRole @default(MEMBER)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model SharedExpense {
  id          String   @id @default(cuid())
  amount      Decimal
  description String
  date        DateTime
  payerId     String
  groupId     String
  createdAt   DateTime @default(now())

  payer  User           @relation("Payer", fields: [payerId], references: [id])
  group  Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  splits ExpenseSplit[]

  @@map("shared_expenses")
}

model ExpenseSplit {
  id        String  @id @default(cuid())
  expenseId String
  userId    String
  amount    Decimal

  expense SharedExpense @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@unique([expenseId, userId])
  @@map("expense_splits")
}

model Settlement {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  amount    Decimal
  groupId   String
  createdAt DateTime @default(now())

  from User @relation(fields: [fromId], references: [id])

  @@map("settlements")
}

model GroupBalance {
  id      String  @id @default(cuid())
  userId  String
  groupId String
  balance Decimal @default(0)

  user  User  @relation("UserBalance", fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation("GroupBalance", fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_balances")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum GroupRole {
  ADMIN
  MEMBER
}